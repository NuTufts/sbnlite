#
# service configuration
#

#include "services_sbnd.fcl"
#include "messages_sbnd.fcl"
#include "sam_sbnd.fcl"
#include "larfft_sbnd.fcl"
#include "signalservices_sbnd.fcl"
#include "rootoutput_sbnd.fcl"
#include "litescanner_base.fcl"

#
# module configuration
#

BEGIN_PROLOG

litescan_sbnd: @local::litescanner_base
litescan_sbnd.out_filename: "larlite_sbnd.root"
litescan_sbnd.DataLookUpMap: 
{
  # Producer names specified below would be looked up & stored in
  # the output larlite file. The key represents the data product
  # type which is uniquely defined for larlite::data::kDATA_TREE_NAME
  # string array.
  potsummary: ["generator"]
  gtruth: ["generator"]
  mcflux: ["generator"]
  mctruth: ["generator"]
  mcshower: ["mcreco"]
  mctrack: ["mcreco"]
  simch: ["simdrift"]
  wire: ["caldata"]
  hit: ["gaushit"]
  opflash: ["opflashtpc0","opflashtpc1"]
}

END_PROLOG


process_name: larliteMaker

services:
{
  # Load the service that manages root files for histograms.
  RandomNumberGenerator:     {}                                 # required by fuzzyCluster
  message:                   @local::sbnd_message_services_prod # from messages_sbnd.fcl
  FileCatalogMetadata:       @local::sbnd_file_catalog_mc       # from sam_sbnd.fcl
                             @table::sbnd_services              # from services_sbnd.fcl
}


#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  -1       # Number of events to create
}


#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
#outputs:
#{
#  out1:
#  {
#    @table::sbnd_rootoutput
#    dataTier: "reconstructed"
#    SelectEvents: ["reco2"]
# }
#}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{
  analyzers:
  {
    litemaker: @local::litescan_sbnd
  }

  llana: [litemaker]

  # define the output stream, there could be more than one if using filters

  # trigger_paths is a keyword and contains the paths that modify the art::event,
  #  ie filters and producers
  trigger_paths: []

  # end_paths is a keyword and contains the paths that do not modify the art::Event,
  # ie analyzers and output streams.  these all run simultaneously
  #
  end_paths: [llana]

}
